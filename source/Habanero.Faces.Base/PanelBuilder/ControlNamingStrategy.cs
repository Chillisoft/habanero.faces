using System.Linq;
using Habanero.BO.ClassDefinition;
using Habanero.Base;

namespace Habanero.Faces.Base
{
    /// <summary>
    /// This is the Naming strategy for naming controls generated by Faces for the various parts of the auto-generated user interfaces.
    /// </summary>
    public class ControlNamingStrategy
    {
        /// <summary>
        /// Get the name to use for a control representing a <see cref="IUIForm"/>.
        /// </summary>
        /// <param name="uiForm">The <see cref="IUIForm"/> to represent with the name.</param>
        /// <returns>The suggested name for the control</returns>
        public string GetUIFormControlName(IUIForm uiForm)
        {
            string name;
            if (uiForm.ClassDef != null) name = uiForm.ClassDef.ClassName;
            else if (uiForm.UIDef != null) name = uiForm.UIDef.ClassName;
            else name = uiForm.Title;
            if (string.IsNullOrWhiteSpace(name)) return "HabaneroPanel";
            return name.Replace(" ", "");
        }

        /// <summary>
        /// Get the name to use for an input control representing a <see cref="IUIFormField"/>.
        /// </summary>
        /// <param name="formField">The <see cref="IUIFormField"/> to represent with the name.</param>
        /// <returns>The suggested name for the input control</returns>
        public string GetInputControlName(IUIFormField formField)
        {
            return formField.PropertyName;
        }
        /// <summary>
        /// Get the name to use for a label control representing a <see cref="IUIFormField"/>.
        /// </summary>
        /// <param name="formField">The <see cref="IUIFormField"/> to represent with the name.</param>
        /// <returns>The suggested name for the label control</returns>
        public string GetLabelControlName(IUIFormField formField)
        {
            return formField.PropertyName + "_Label";
        }

        /// <summary>
        /// Determines a unique name for the control within the context of the controls that already exist in the <paramref name="containerControl"/>.
        /// </summary>
        /// <param name="containerControl">The control within which the supplied <paramref name="name"/> should be unique.</param>
        /// <param name="name">The name to be altered for uniqueness.</param>
        /// <returns>A unique name.</returns>
        public string GetUniqueControlNameWithin(IControlHabanero containerControl, string name)
        {
            var uniqueName = name;
            var index = 0;
            if (containerControl == null) return uniqueName;
            var siblingControls = containerControl.Controls.OfType<IControlHabanero>().ToList();
            while (siblingControls.Any(ctl => ctl.Name == uniqueName))
            {
                index++;
                uniqueName = string.Format("{0}_{1}", name, index);
            }
            return uniqueName;
        }
    }
}